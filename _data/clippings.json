[{"title":"grep Pocket Reference ","authors":"John Bambenek and Agnieszka Klus","page":"79","location":"1024-1025","created":"2019-10-24 10:13:30 +1300","clipping":"using PCRE to find information is like using a weed whacker on yourself to do brain surgery: it gets the job done with minimum of effort, but it is an awful mess."},{"title":"grep Pocket Reference ","authors":"John Bambenek and Agnieszka Klus","page":"86","location":"1122-1123","created":"2019-10-24 10:17:56 +1300","clipping":"If only the capital letter is specified (e.g., /p{L}), all subgroups are matched."},{"title":"grep Pocket Reference ","authors":"John Bambenek and Agnieszka Klus","page":"110","location":"1470-1473","created":"2019-10-24 11:37:42 +1300","clipping":"For many recipes, it makes sense to place \\b before and after the string. This ensures that the content has some sort of whitespace before and after it, preventing the case in which you are looking for a 9-digit number that appears to be a Social Security number but get false-positive matches on 29-digit numbers."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"107","location":"1635-1636","created":"2019-10-24 20:46:51 +1300","clipping":"In Debian and derivatives operating systems, the pg_virtualenv is a tool that creates a temporary PostgreSQL installation that will exist only while you’re running your tests."},{"title":"It ","authors":"Stephen King","page":"743","location":"11391-11391","created":"2019-10-25 21:59:41 +1300","clipping":"thousand, there's probably half that have"},{"title":"It ","authors":"Stephen King","page":"744","location":"11402-11402","created":"2019-10-25 22:00:32 +1300","clipping":"of this?' Mr Keene asked me. 'You're looking"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"156","location":"2379-2380","created":"2019-10-26 16:22:06 +1300","clipping":"explain (costs off, buffers, analyze)"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"158","location":"2408-2410","created":"2019-10-26 16:22:45 +1300","clipping":"Some extensions such as pg_trgm add to that list so that you may benefit from a kNN index lookup in other situations, such as in queries using the like operator, or even the regular expression operator ~."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"158","location":"2423-2424","created":"2019-10-26 16:23:44 +1300","clipping":"       rank() over(partition by decade"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"162","location":"2474-2476","created":"2019-10-26 16:27:29 +1300","clipping":"Please take the time to read Markus Winand’s Paging Through Results, as I won’t explain it better than he does. Also, never use offset again!"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"162","location":"2480-2481","created":"2019-10-26 16:28:11 +1300","clipping":"The proper way to implement pagination is to use index lookups, and if you have multiple columns in your ordering clause, you can do that with the row() construct."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"163","location":"2499-2509","created":"2019-10-26 16:29:59 +1300","clipping":"     select lap, drivers.code, position,             milliseconds * interval '1ms' as laptime        from laptimes             join drivers using(driverid)       where raceid = 972         and row(lap, position) > (1, 3)    order by lap, position fetch first 3 rows only;"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"168","location":"2574-2575","created":"2019-10-26 16:51:04 +1300","clipping":"bool_and aggregate starts true and remains true only if every row it sees evaluates to true."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"178","location":"2721-2722","created":"2019-10-26 17:00:40 +1300","clipping":"  group by cube(drivers.surname, constructors.name);"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"210","location":"3217-3219","created":"2019-10-26 17:18:49 +1300","clipping":"PostgreSQL it’s possible to use the CREATE AGGREGATE command to register your own custom aggregate. Any such custom aggregate can also be given a window frame definition to work on."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"229","location":"3503-3505","created":"2019-10-26 17:43:27 +1300","clipping":"The allballs time literal sounds like an Easter egg — its history is explained in this pgsql-docs thread."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"239","location":"3653-3657","created":"2019-10-26 18:23:27 +1300","clipping":"The main thing about Booleans in SQL is that they have three possible values: true, false and null. Moreover the behavior with null is entirely ad-hoc, so either you remember it or you remember to check your assumptions. For more about this topic, you can read What is the deal with NULLs? from PostgreSQL Contributor Jeff Davis."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"240","location":"3666-3667","created":"2019-10-26 18:24:08 +1300","clipping":"There are also regular expression functions, including the very powerful regexp_split_to_table()."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"240","location":"3672-3673","created":"2019-10-26 18:24:35 +1300","clipping":"Note that PostgreSQL also supports indexing for regular expressions thanks to its trigram extension: pg_trgm."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"284","location":"4352-4353","created":"2019-10-26 19:14:07 +1300","clipping":"exclusion constraint that guarantees non-overlapping validity periods for any given currency:"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"284","location":"4352-4353","created":"2019-10-26 19:14:21 +1300","clipping":"exclusion constraint that guarantees non-overlapping validity periods for any"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"284","location":"4352-4353","created":"2019-10-26 19:14:23 +1300","clipping":"exclusion constraint that guarantees non-overlapping validity periods for any given currency:"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"284","location":"4352-4353","created":"2019-10-26 19:14:29 +1300","clipping":"exclusion constraint that guarantees non-overlapping validity periods for any given currency:"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"284","location":"4352-4353","created":"2019-10-26 19:14:32 +1300","clipping":"exclusion constraint that guarantees non-overlapping validity periods for any given currency:"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"284","location":"4352-4355","created":"2019-10-26 19:15:23 +1300","clipping":"uses an exclusion constraint that guarantees non-overlapping validity periods for any given currency: exclude using gist (currency with =, validity with &&)"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"295","location":"4509-4517","created":"2019-10-26 19:25:18 +1300","clipping":"  select tag, count(*)     from hashtag, unnest(hashtags) as t(tag) group by tag order by count desc    limit 10; This time, as the query must scan all the hashtags in the table, it won’t use the previous index of course. The unnest() function is a must-have when dealing with arrays in PostgreSQL, as it allows processing the array’s content as if it were just another relation."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"300","location":"4591-4592","created":"2019-10-26 19:29:47 +1300","clipping":"It should be no surprise that a PostgreSQL extension allows writing stored procedures in this language. If you have to deal with XML documents in your database, check out PL/XSLT."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"302","location":"4624-4628","created":"2019-10-26 19:30:47 +1300","clipping":"the community realized that the amount of JSON processing and advanced searching required in PostgreSQL would not be easy or reasonable to implement over a text datatype, and implemented a binary version of the JSON datatype, this time with a full set of operators and functions to work with. There are some incompatibilities in between the text-based json datatype and the newer jsonb version of it, where it’s been argued that b stands for better:"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"306","location":"4679-4683","created":"2019-10-26 19:33:02 +1300","clipping":"A good trade-off is to design a model with some static columns are created and managed traditionally, and an extra column of jsonb type is added for those things you didn’t know yet, and that would be used only sometimes, maybe for debugging reasons or special cases. This works well until the application’s code is querying the extra column in every situation because some important data is found only there. At this point, it’s worth promoting parts of the extra field content into proper PostgreSQL attributes in your relational schema."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"341","location":"5228-5229","created":"2019-10-26 19:46:26 +1300","clipping":"dbnormalization.com"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"354","location":"5414-5415","created":"2019-10-26 19:53:34 +1300","clipping":"The check constraint can also reference several columns of the same table at once,"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"354","location":"5421-5427","created":"2019-10-26 19:54:14 +1300","clipping":"PostgreSQL documentation for the CREATE DOMAIN SQL command: CREATE DOMAIN us_postal_code AS TEXT  CHECK  (    VALUE ~ '^\\d{5}$'     OR    VALUE ~ '^\\d{5}-\\d{4}$'  ); It"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"393","location":"6026-6027","created":"2019-10-26 20:02:01 +1300","clipping":"Never implement an EAV model, this anti-pattern makes everything more complex than it should for a very small gain at modeling time."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"393","location":"6026-6027","created":"2019-10-26 20:02:16 +1300","clipping":"Never implement an EAV model, this anti-pattern makes everything more complex than it should for a very small gain at modeling time. It might be that the business case your application is solving actually"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"393","location":"6026-6027","created":"2019-10-26 20:02:22 +1300","clipping":"Never implement an EAV model, this anti-pattern makes everything more complex than it should for a very small gain at modeling time. It might be that the business case your application is solving actually"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"393","location":"6026-6026","created":"2019-10-26 20:02:29 +1300","clipping":"Never implement an EAV model, this anti-pattern makes everything more complex than it should for a"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"393","location":"6026-6027","created":"2019-10-26 20:02:34 +1300","clipping":"Never implement an EAV model, this anti-pattern makes everything more complex than it should for a very small gain at modeling time."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"394","location":"6028-6028","created":"2019-10-26 20:02:53 +1300","clipping":"consider having as solid a model as possible and use jsonb columns as extension points."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"397","location":"6080-6081","created":"2019-10-26 20:05:49 +1300","clipping":"UUIDs are useful in distributed computing where you can’t synchronize every concurrent and distributed transaction against a common centralized sequence, which"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"405","location":"6199-6202","created":"2019-10-26 20:08:27 +1300","clipping":"We first create a classic view that computes the points every time it’s referenced in queries and join operations and then build a materialized view on top of it. This makes it easy to see how much the materialized view has drifted from the authoritative version of the content with a simple except query."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"406","location":"6225-6244","created":"2019-10-26 20:09:47 +1300","clipping":"An alternative to classic history tables, when using PostgreSQL, takes advantage of the advanced data type JSONB. create schema if not exists archive; create type archive.action_t     as enum('insert', 'update', 'delete'); create table archive.older_versions  (    table_name text,    date       timestamptz default now(),    action     archive.action_t,    data       jsonb  ); Then it’s possible to fill in the archive older_versions table with data from another table: insert into archive.older_versions(table_name, action, data)      select 'hashtag', 'delete', row_to_json(hashtag)        from hashtag       where id = 720554371822432256   returning table_name, date, action, jsonb_pretty(data) as data;"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"411","location":"6290-6292","created":"2019-10-26 20:11:16 +1300","clipping":"So when you need to keep around values that are only valid for a period of time, consider using the PostgreSQL range data types and the exclusion constraint that guarantees no overlapping of values in your data set. This is a powerful technique."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"427","location":"6544-6544","created":"2019-10-26 20:16:19 +1300","clipping":"ToroDB project, a MongoDB replica solution based on PostgreSQL!"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"438","location":"6714-6716","created":"2019-10-27 17:15:36 +1300","clipping":"The three commands insert, update, and delete have something in common: they accept a returning clause. This allows the DML command to return a result set to the application with the same protocol as the select clause, both are a projection."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"441","location":"6762-6764","created":"2019-10-27 17:16:23 +1300","clipping":"If for some reason you can’t use copy, for performance reasons, consider using a single transaction doing several insert statements each with many values."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"458","location":"7022-7036","created":"2019-10-27 17:27:55 +1300","clipping":"7.2.8 Delete but Keep a Few Rows When cleaning up a data set, it may happen that you want to remove most of the content of a table. It could be a logs table, an audit trail that has expired or something like that. As we saw earlier when using PostgreSQL, delete marks the tuples as not being visible anymore and then vacuum does the heavy lifting in the background. It is then more efficient to create a table containing only the new rows and swap it with the old table: begin; create table new_name (like name including all); insert into new_name      select <column list>        from name       where <restrictions>;         drop table name; alter table new_name rename to name; commit; In the general case, as soon as you remove most entries from your table, this method is going to be more efficient."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"462","location":"7084-7086","created":"2019-10-27 17:30:29 +1300","clipping":"PostgreSQL’s implementation of serializable is an amazing work. It is described in details at the PostgreSQL wiki page entitled Serializable, and the wiki page SSI contains more details about how to use it."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"466","location":"7143-7144","created":"2019-10-27 17:37:48 +1300","clipping":"create type tweet.action_t"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"466","location":"7143-7154","created":"2019-10-27 17:38:11 +1300","clipping":"create type tweet.action_t     as enum('rt', 'fav', 'de-rt', 'de-fav'); create table tweet.activity  (   id          bigserial primary key,   messageid   bigint not null references tweet.message(messageid),   datetime    timestamptz not null default now(),   action      tweet.action_t not null,   unique(messageid, datetime, action)"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"466","location":"7143-7160","created":"2019-10-27 17:38:28 +1300","clipping":"create type tweet.action_t     as enum('rt', 'fav', 'de-rt', 'de-fav'); create table tweet.activity  (   id          bigserial primary key,   messageid   bigint not null references tweet.message(messageid),   datetime    timestamptz not null default now(),   action      tweet.action_t not null,   unique(messageid, datetime, action)  ); commit; In this version, the counters have disappeared, replaced by a full record of the base information needed to compute them. We now have an activity list with a denormalized ENUM for possible actions. To get the rts and favs counters back from this schema, we count lines in the activity records associated with a given messageid:   select   count(*) filter(where action = 'rt')"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"466","location":"7143-7160","created":"2019-10-27 17:38:31 +1300","clipping":"create type tweet.action_t     as enum('rt', 'fav', 'de-rt', 'de-fav'); create table tweet.activity  (   id          bigserial primary key,   messageid   bigint not null references tweet.message(messageid),   datetime    timestamptz not null default now(),   action      tweet.action_t not null,   unique(messageid, datetime, action)  ); commit; In this version, the counters have disappeared, replaced by a full record of the base information needed to compute them. We now have an activity list with a denormalized ENUM for possible actions. To get the rts and favs counters back from this schema, we count lines in the activity records associated with a given messageid:   select   count(*) filter(where action = 'rt')"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"474","location":"7268-7273","created":"2019-10-27 17:39:31 +1300","clipping":"create table tweet.counters as   select   count(*) filter(where action = 'rt')          - count(*) filter(where action = 'de-rt')"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"482","location":"7384-7386","created":"2019-10-27 17:41:41 +1300","clipping":"Unfortunately, it is not possible to write triggers in plain SQL language, so we have to write stored procedures to benefit from the PostgreSQL trigger capabilities."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"489","location":"7492-7493","created":"2019-10-27 17:43:10 +1300","clipping":"A PL/pgSQL Trigger Procedure For Maintaining A Summary Table example in the PostgreSQL documentation."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"500","location":"7659-7660","created":"2019-10-27 17:45:16 +1300","clipping":"PostgreSQL LISTEN and NOTIFY support is perfect for maintaining a cache."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"504","location":"7715-7718","created":"2019-10-27 17:46:39 +1300","clipping":"this query, we use the PostgreSQL json_populate_record function. This function is almost magical and it is described as such in the documentation: Expands the object in from_json to a row whose columns match the record type defined by base (see note below)."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"506","location":"7757-7759","created":"2019-10-27 17:48:13 +1300","clipping":"Any queueing mechanism requires that event accumulated when there’s no worker connected are kept available until next connection, and replication is a special case of event queueing. It is not possible to implement queueing correctly with PostgreSQL listen/notify feature."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"522","location":"8000-8000","created":"2019-10-27 18:55:23 +1300","clipping":"ldap_fdw. The list is incredibly long and"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"529","location":"8103-8104","created":"2019-10-27 19:01:34 +1300","clipping":"earthdistance The earthdistance module provides two different approaches to calculating great circle distances on the surface of the Earth. The"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"532","location":"8146-8147","created":"2019-10-27 19:03:10 +1300","clipping":"pg_partman is an extension to create and manage both time-based and serial-based table partition sets. Native partitioning in PostgreSQL 10 is supported as of pg_partman v3.0.1."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"533","location":"8172-8172","created":"2019-10-27 19:04:07 +1300","clipping":"If you’re using full text search with PostgreSQL, then have a look at the RUM extension."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"551","location":"8438-8440","created":"2019-10-27 19:09:45 +1300","clipping":"All you need is for your PostgreSQL driver of choice to expose the PostgreSQL COPY protocol. Make sure it does, and then learn how to properly load data using it. With"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"555","location":"8509-8511","created":"2019-10-27 19:11:03 +1300","clipping":"The PostgreSQL extension pg_trgm provides functions and operators for determining the similarity of alphanumeric text based on trigram matching, as well as index operator classes that support fast searching for similar strings."},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"562","location":"8610-8615","created":"2019-10-27 19:13:32 +1300","clipping":"select artist, title   from lastfm.track  where title %> 'peace' except select artist, title   from lastfm.track  where title ~* 'peace';"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"630","location":"9656-9656","created":"2019-10-27 19:27:28 +1300","clipping":"HyperLogLog"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"631","location":"9669-9669","created":"2019-10-27 19:28:09 +1300","clipping":"pgxn.org"},{"title":"The Art Of PostgreSQL ","authors":"Dimitri Fontaine","page":"631","location":"9670-9670","created":"2019-10-27 19:28:13 +1300","clipping":"PostgresWeekly.com."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"98","location":"1413-1416","created":"2019-10-27 21:06:33 +1300","clipping":"tools such as Bypass[21] let you to run a web API on the same VM as your tests. This API can be controlled by your tests through composed external responses. This way your tests fully exercise the code that integrates with the third-party service, from your business logic to the HTTP client. Bypass has been invaluable to test the integration with external systems at Bleacher Report and icanmakeitbetter."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"99","location":"1428-1429","created":"2019-10-27 21:07:01 +1300","clipping":"Excoveralls[23] is a library that measures test coverage, sending a report to the command line, to HTML, or to external services."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"104","location":"1527-1529","created":"2019-10-27 21:09:20 +1300","clipping":"Enter Bureaucrat,[25] a tool that attempts to solve this discrepancy problem. Bureaucrat is a library that generates API documentation from tests. If you have good API tests, then the API docs are always in sync."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"120","location":"1754-1757","created":"2019-10-27 21:15:20 +1300","clipping":"The Terraform library allows you to wrap endpoints of your web application and replace them with an Elixir alternative. That allows you to change your “planet” as smoothly as possible by keeping the overall web API the same while you work in small increments, replacing a single API at a time. Terraform handles the rest. You don’t need to change all of your endpoints at once because Terraform proxies unhandled legacy requests and hands them off to the old system."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"132","location":"1974-1975","created":"2019-10-27 21:18:46 +1300","clipping":"Elixir provides an alternative called umbrella projects."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"140","location":"2104-2105","created":"2019-10-28 06:19:38 +1300","clipping":"$ ​​mix​​ ​​hex.outdated"},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"142","location":"2156-2156","created":"2019-10-28 06:20:27 +1300","clipping":"hex.audit"},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"149","location":"2230-2230","created":"2019-10-28 21:37:32 +1300","clipping":"OO changes. FP copies."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"162","location":"2467-2469","created":"2019-10-28 21:45:35 +1300","clipping":"An agent[44] is a process that handles state. An agent is perfect for keeping some shared state that is accessed by multiple processes in your application."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"162","location":"2469-2479","created":"2019-10-28 21:46:04 +1300","clipping":"A task[45] is about supervised behavior. For example, to do two things concurrently, use Task.async/1 to spawn each task and Task.await/1 to wait for the result, like this: ​  task1 = Task.async(​fn​ -> do_some_work() ​end​) ​  task2 = Task.async(​fn​ -> do_more_work() ​end​) ​  Task.await(task1) ​  Task.await(task2) We start two tasks concurrently and wait for both to finish."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"181","location":"2825-2825","created":"2019-10-28 21:56:39 +1300","clipping":"Use processes"},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"181","location":"2825-2826","created":"2019-10-28 21:57:11 +1300","clipping":"to model runtime properties, such as mutable state, concurrency, and failures, but never for code organization."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"183","location":"2855-2858","created":"2019-10-28 21:58:30 +1300","clipping":"def​ init(tmp_dir) ​do​ ​  Process.flag(​:trap_exit​, true)"},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"190","location":"2962-2964","created":"2019-10-29 06:54:03 +1300","clipping":"nodes can only communicate if they share the same cookie. It is not a browser cookie; it is a unique identifier stored as an atom. You can find this cookie at ~/.erlang.cookie. Erlang"},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"195","location":"3045-3046","created":"2019-10-29 06:58:44 +1300","clipping":"Sometimes the lines between creating a database and a GenServer may blur."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"202","location":"3140-3141","created":"2019-10-29 07:05:24 +1300","clipping":"A process group lets you group processes based on a property or on a shared attribute."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"202","location":"3147-3148","created":"2019-10-29 07:06:38 +1300","clipping":"distributed registries store the names of processes across the whole cluster. Let’s"},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"204","location":"3178-3179","created":"2019-10-29 07:09:32 +1300","clipping":"The :global Registry :global is a distributed registry with atomic registrations"},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"204","location":"3178-3180","created":"2019-10-29 07:09:52 +1300","clipping":"The :global Registry :global is a distributed registry with atomic registrations so a global process named :my_iex will be visible to all nodes at the same time. Each node keeps its own copy of registered processes so there’s no central storage and the translation of a name to a PID is always fast. Each"},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"204","location":"3178-3180","created":"2019-10-29 07:09:56 +1300","clipping":"The :global Registry :global is a distributed registry with atomic registrations so a global process named :my_iex will be visible to all nodes at the same time. Each node keeps its own copy of registered processes so there’s no central storage and the translation of a name to a PID is always fast."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"208","location":"3237-3238","created":"2019-10-29 07:12:13 +1300","clipping":"Using :pg2, you can create groups and processes may join and leave those groups at any time."},{"title":"Adopting Elixir ","authors":"Ben Marx, José Valim, Bruce Tate","page":"209","location":"3261-3263","created":"2019-10-29 15:16:49 +1300","clipping":"In Elixir, when you need to store shared data across multiple processes, you can use ETS,[62] which is the Erlang Term Storage. ETS provides a high-level mechanism for storing data in-memory, and it’s often the tool of choice for caches."}]